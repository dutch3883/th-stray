rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidImage() {
      return request.resource.contentType.matches('image/.*')
        && request.resource.size <= 5 * 1024 * 1024; // 5MB max
    }

    function getUserRole() {
    	return ("role" in request.auth.token) ? request.auth.token.role : 'reporter';
    }

    function isAdmin() {
      return isAuthenticated() 
        && getUserRole() == 'admin';
    }

    function isRescuer() {
      return isAuthenticated() 
        && (getUserRole() == 'admin' || getUserRole() == 'rescuer');
    }

    function isReporter() {
      return isAuthenticated() 
        && (getUserRole() == 'admin' 
            || getUserRole() == 'rescuer' 
            || getUserRole() == 'reporter');
    }

    function hasValidRole() {
      return isAuthenticated() 
        && (getUserRole() == 'admin' 
            || getUserRole() == 'rescuer' 
            || getUserRole() == 'reporter'); // Allow users with null role (fallback)
    }

    // Report images: /reports/{userId}/{imageId}
    match /reports/{userId}/{imageId} {
      // Allow read if:
      // 1. User is admin or rescuer (can read any image), or
      // 2. User is reporter and owns the image, or
      // 3. User has null role and owns the image (fallback)
      allow read: if isRescuer() || (hasValidRole() && isOwner(userId));
      
      // Allow create if:
      // 1. User is authenticated and has valid role (including null)
      // 2. User is uploading to their own folder
      // 3. File is an image under 5MB
      allow create: if hasValidRole() 
        && isOwner(userId)
        && isValidImage();
        
      // Allow delete if:
      // 1. User owns the image, or
      // 2. User is admin or rescuer
      allow delete: if (isOwner(userId) || isRescuer());
    }
  }
}
